{"version":3,"file":"aurelia-templating-router.js","sources":["../../src/router-view.ts","../../src/route-loader.ts","../../src/route-href.ts","../../src/aurelia-templating-router.ts"],"sourcesContent":["import { Container } from 'aurelia-dependency-injection';\nimport { createOverrideContext, OverrideContext } from 'aurelia-binding';\nimport {\n  ViewSlot,\n  ViewLocator,\n  BehaviorInstruction,\n  CompositionTransaction,\n  CompositionEngine,\n  ShadowDOM,\n  SwapStrategies,\n  ResourceDescription,\n  HtmlBehaviorResource,\n  CompositionTransactionNotifier,\n  View,\n  CompositionTransactionOwnershipToken,\n  Controller,\n  ViewFactory,\n  CompositionContext,\n  IStaticResourceConfig,\n  IStaticViewConfig\n} from 'aurelia-templating';\nimport {\n  Router\n} from 'aurelia-router';\nimport { Origin } from 'aurelia-metadata';\nimport { DOM } from 'aurelia-pal';\nimport { IRouterViewViewPortInstruction, Constructable } from './interfaces';\n\nclass EmptyLayoutViewModel {\n\n}\n\n/**\n * Implementation of Aurelia Router ViewPort. Responsible for loading route, composing and swapping routes views\n */\nexport class RouterView {\n\n  /**@internal */\n  static inject() {\n    return [DOM.Element, Container, ViewSlot, Router, ViewLocator, CompositionTransaction, CompositionEngine];\n  }\n\n  /**\n   * @internal Actively avoid using decorator to reduce the amount of code generated\n   *\n   * There is no view to compose by default in a router view\n   * This custom element is responsible for composing its own view, based on current config\n   */\n  static $view: IStaticViewConfig = null;\n  /**\n   * @internal Actively avoid using decorator to reduce the amount of code generated\n   */\n  static $resource: IStaticResourceConfig = {\n    name: 'router-view',\n    bindables: ['swapOrder', 'layoutView', 'layoutViewModel', 'layoutModel', 'inherit-binding-context'] as any\n  };\n\n  /**\n   * Swapping order when going to a new route. By default, supports 3 value: before, after, with\n   * - before = new in -> old out\n   * - after = old out -> new in\n   * - with = new in + old out\n   *\n   * These values are defined by swapStrategies export in aurelia-templating/ aurelia-framework\n   * Can be extended there and used here\n   */\n  swapOrder?: string;\n\n  /**\n   * Layout view used for this router-view layout, if no layout-viewmodel specified\n   */\n  layoutView?: any;\n\n  /**\n   * Layout view model used as binding context for this router-view layout\n   * Actual type would be {string | Constructable | object}\n   */\n  layoutViewModel?: any;\n\n  /**\n   * Layout model used to activate layout view model, if specified with `layoutViewModel`\n   */\n  layoutModel?: any;\n\n  /**\n   * Element associated with this <router-view/> custom element\n   */\n  readonly element: Element;\n\n  /**\n   * Current router associated with this <router-view/>\n   */\n  readonly router: Router;\n\n  /**\n   * Container at this <router-view/> level\n   */\n  container: Container;\n\n  /**\n   * @internal\n   * the view slot for adding / removing Routing related views created dynamically\n   */\n  viewSlot: ViewSlot;\n\n  /**\n   * @internal\n   * Used to mimic partially functionalities of CompositionEngine\n   */\n  viewLocator: ViewLocator;\n\n  /**\n   * @internal\n   * View composed by the CompositionEngine, depends on layout / viewports/ moduleId / viewModel of routeconfig\n   */\n  view: View;\n\n  /**\n   * @internal\n   * The view where this `<router-view/>` is placed in\n   */\n  owningView: View;\n\n  /**\n   * @internal\n   * Composition Transaction of initial composition transaction, when this <router-view/> is created\n   */\n  compositionTransaction: CompositionTransaction;\n\n  /**\n   * @internal\n   * CompositionEngine instance, responsible for composing view/view model during process changes phase of this <router-view/>\n   */\n  compositionEngine: CompositionEngine;\n\n  /**\n   * Composition transaction notifier instance. Created when this router-view composing its instruction\n   * for the first time.\n   * Null on 2nd time and after.\n   * @internal\n   */\n  compositionTransactionNotifier: CompositionTransactionNotifier;\n\n  /**\n   * @internal\n   */\n  compositionTransactionOwnershipToken: CompositionTransactionOwnershipToken;\n\n  /**\n   * @internal\n   */\n  overrideContext: OverrideContext;\n\n  constructor(\n    element: Element,\n    container: Container,\n    viewSlot: ViewSlot,\n    router: Router,\n    viewLocator: ViewLocator,\n    compositionTransaction: CompositionTransaction,\n    compositionEngine: CompositionEngine\n  ) {\n    this.element = element;\n    this.container = container;\n    this.viewSlot = viewSlot;\n    this.router = router;\n    this.viewLocator = viewLocator;\n    this.compositionTransaction = compositionTransaction;\n    this.compositionEngine = compositionEngine;\n    // add this <router-view/> to router view ports lookup based on name attribute\n    // when this router is the root router-view\n    // also trigger AppRouter registerViewPort extra flow\n    this.router.registerViewPort(this, this.element.getAttribute('name'));\n\n    // Each <router-view/> process its instruction as a composition transaction\n    // there are differences between intial composition and subsequent compositions\n    // also there are differences between root composition and child <router-view/> composition\n    // mark the first composition transaction with a property initialComposition to distinguish it\n    // when the root <router-view/> gets new instruction for the first time\n    if (!('initialComposition' in compositionTransaction)) {\n      compositionTransaction.initialComposition = true;\n      this.compositionTransactionNotifier = compositionTransaction.enlist();\n    }\n  }\n\n  created(owningView: View): void {\n    this.owningView = owningView;\n  }\n\n  bind(bindingContext: any, overrideContext: OverrideContext): void {\n    // router needs to get access to view model of current route parent\n    // doing it in generic way via viewModel property on container\n    this.container.viewModel = bindingContext;\n    this.overrideContext = overrideContext;\n  }\n\n  /**\n   * Implementation of `aurelia-router` ViewPort interface, responsible for templating related part in routing Pipeline\n   */\n  process($viewPortInstruction: any, waitToSwap?: boolean): Promise<void> {\n    // have strong typings without exposing it in public typings, this is to ensure maximum backward compat\n    const viewPortInstruction = $viewPortInstruction as IRouterViewViewPortInstruction;\n    const component = viewPortInstruction.component;\n    const childContainer = component.childContainer;\n    const viewModel = component.viewModel;\n    const viewModelResource = component.viewModelResource as unknown as ResourceDescription;\n    const metadata = viewModelResource.metadata;\n    const config = component.router.currentInstruction.config;\n    const viewPortConfig = config.viewPorts ? (config.viewPorts[viewPortInstruction.name] || {}) : {};\n\n    (childContainer.get(RouterViewLocator) as RouterViewLocator)._notify(this);\n\n    // layoutInstruction is our layout viewModel\n    const layoutInstruction = {\n      viewModel: viewPortConfig.layoutViewModel || config.layoutViewModel || this.layoutViewModel,\n      view: viewPortConfig.layoutView || config.layoutView || this.layoutView,\n      model: viewPortConfig.layoutModel || config.layoutModel || this.layoutModel,\n      router: viewPortInstruction.component.router,\n      childContainer: childContainer,\n      viewSlot: this.viewSlot\n    };\n\n    // viewport will be a thin wrapper around composition engine\n    // to process instruction/configuration from users\n    // preparing all information related to a composition process\n    // first by getting view strategy of a ViewPortComponent View\n    const viewStrategy = this.viewLocator.getViewStrategy(component.view || viewModel);\n    if (viewStrategy && component.view) {\n      viewStrategy.makeRelativeTo(Origin.get(component.router.container.viewModel.constructor).moduleId);\n    }\n\n    // using metadata of a custom element view model to load appropriate view-factory instance\n    return metadata\n      .load(childContainer, viewModelResource.value, null, viewStrategy, true)\n      // for custom element, viewFactory typing is always ViewFactory\n      // for custom attribute, it will be HtmlBehaviorResource\n      .then((viewFactory: ViewFactory | HtmlBehaviorResource) => {\n        // if this is not the first time that this <router-view/> is composing its instruction\n        // try to capture ownership of the composition transaction\n        // child <router-view/> will not be able to capture, since root <router-view/> typically captures\n        // the ownership token\n        if (!this.compositionTransactionNotifier) {\n          this.compositionTransactionOwnershipToken = this.compositionTransaction.tryCapture();\n        }\n\n        if (layoutInstruction.viewModel || layoutInstruction.view) {\n          viewPortInstruction.layoutInstruction = layoutInstruction;\n        }\n\n        const viewPortComponentBehaviorInstruction = BehaviorInstruction.dynamic(\n          this.element,\n          viewModel,\n          viewFactory as ViewFactory\n        );\n        viewPortInstruction.controller = metadata.create(childContainer, viewPortComponentBehaviorInstruction);\n\n        if (waitToSwap) {\n          return null;\n        }\n\n        this.swap(viewPortInstruction);\n      });\n  }\n\n  swap($viewPortInstruction: any): void | Promise<void> {\n    // have strong typings without exposing it in public typings, this is to ensure maximum backward compat\n    const viewPortInstruction: IRouterViewViewPortInstruction = $viewPortInstruction;\n    const viewPortController = viewPortInstruction.controller;\n    const layoutInstruction = viewPortInstruction.layoutInstruction;\n    const previousView = this.view;\n\n    // Final step of swapping a <router-view/> ViewPortComponent\n    const work = () => {\n      const swapStrategy = SwapStrategies[this.swapOrder] || SwapStrategies.after;\n      const viewSlot = this.viewSlot;\n\n      swapStrategy(\n        viewSlot,\n        previousView,\n        () => Promise.resolve(viewSlot.add(this.view))\n      ).then(() => {\n        this._notify();\n      });\n    };\n\n    // Ensure all users setups have been completed\n    const ready = (owningView_or_layoutView: View) => {\n      viewPortController.automate(this.overrideContext, owningView_or_layoutView);\n      const transactionOwnerShipToken = this.compositionTransactionOwnershipToken;\n      // if this router-view is the root <router-view/> of a normal startup via aurelia.setRoot\n      // attemp to take control of the transaction\n\n      // if ownership can be taken\n      // wait for transaction to complete before swapping\n      if (transactionOwnerShipToken) {\n        return transactionOwnerShipToken\n          .waitForCompositionComplete()\n          .then(() => {\n            this.compositionTransactionOwnershipToken = null;\n            return work();\n          });\n      }\n\n      // otherwise, just swap\n      return work();\n    };\n\n    // If there is layout instruction, new to compose layout before processing ViewPortComponent\n    // layout controller/view/view-model is composed using composition engine APIs\n    if (layoutInstruction) {\n      if (!layoutInstruction.viewModel) {\n        // createController chokes if there's no viewmodel, so create a dummy one\n        // but avoid using a POJO as it creates unwanted metadata in Object constructor\n        layoutInstruction.viewModel = new EmptyLayoutViewModel();\n      }\n\n      // using composition engine to create compose layout\n      return this.compositionEngine\n        // first create controller from layoutInstruction\n        // and treat it as CompositionContext\n        // then emulate slot projection with ViewPortComponent view\n        .createController(layoutInstruction as CompositionContext)\n        .then((layoutController: Controller) => {\n          const layoutView = layoutController.view;\n          ShadowDOM.distributeView(viewPortController.view, layoutController.slots || layoutView.slots);\n          // when there is a layout\n          // view hierarchy is: <router-view/> owner view -> layout view -> ViewPortComponent view\n          layoutController.automate(createOverrideContext(layoutInstruction.viewModel), this.owningView);\n          layoutView.children.push(viewPortController.view);\n          return layoutView || layoutController;\n        })\n        .then((newView: View | Controller) => {\n          this.view = newView as View;\n          return ready(newView as View);\n        });\n    }\n\n    // if there is no layout, then get ViewPortComponent view ready as view property\n    // and process controller/swapping\n    // when there is no layout\n    // view hierarchy is: <router-view/> owner view -> ViewPortComponent view\n    this.view = viewPortController.view;\n\n    return ready(this.owningView);\n  }\n\n  /**\n   * Notify composition transaction that this router has finished processing\n   * Happens when this <router-view/> is the root router-view\n   * @internal\n   */\n  _notify() {\n    const notifier = this.compositionTransactionNotifier;\n    if (notifier) {\n      notifier.done();\n      this.compositionTransactionNotifier = null;\n    }\n  }\n}\n\n/**\n* Locator which finds the nearest RouterView, relative to the current dependency injection container.\n*/\nexport class RouterViewLocator {\n\n  /*@internal */\n  promise: Promise<any>;\n\n  /*@internal */\n  resolve: (val?: any) => void;\n\n  /**\n  * Creates an instance of the RouterViewLocator class.\n  */\n  constructor() {\n    this.promise = new Promise((resolve) => this.resolve = resolve);\n  }\n\n  /**\n  * Finds the nearest RouterView instance.\n  * @returns A promise that will be resolved with the located RouterView instance.\n  */\n  findNearest(): Promise<RouterView> {\n    return this.promise;\n  }\n\n  /**@internal */\n  _notify(routerView: RouterView): void {\n    this.resolve(routerView);\n  }\n}\n","import { Origin } from 'aurelia-metadata';\nimport { relativeToFile } from 'aurelia-path';\nimport { NavigationInstruction, RouteConfig, RouteLoader, Router } from 'aurelia-router';\nimport { CompositionEngine, customElement, inlineView, useView, CompositionContext } from 'aurelia-templating';\nimport { RouterViewLocator } from './router-view';\nimport { Container } from 'aurelia-dependency-injection';\n\n/**@internal exported for unit testing */\nexport class EmptyClass { }\ninlineView('<template></template>')(EmptyClass);\n\n/**\n * Default implementation of `RouteLoader` used for loading component based on a route config\n */\nexport class TemplatingRouteLoader extends RouteLoader {\n\n  /**@internal */\n  static inject = [CompositionEngine];\n\n  /**@internal */\n  compositionEngine: CompositionEngine;\n\n  constructor(\n    compositionEngine: CompositionEngine\n  ) {\n    super();\n    this.compositionEngine = compositionEngine;\n  }\n\n  /**\n   * Resolve a view model from a RouteConfig\n   * Throws when there is neither \"moduleId\" nor \"viewModel\" property\n   * @internal\n   */\n  resolveViewModel(router: Router, config: RouteConfig): Promise<string | null | Function> {\n    return new Promise((resolve, reject) => {\n      let viewModel: string | null | Function;\n      if ('moduleId' in config) {\n        let moduleId = config.moduleId;\n        if (moduleId === null) {\n          viewModel = EmptyClass;\n        } else {\n          // this requires container of router has passes a certain point\n          // where a view model has been setup on the container\n          // it will fail in enhance scenario because no viewport has been registered\n          moduleId = relativeToFile(moduleId, Origin.get(router.container.viewModel.constructor).moduleId);\n          if (/\\.html/i.test(moduleId)) {\n            viewModel = createDynamicClass(moduleId);\n          } else {\n            viewModel = moduleId;\n          }\n        }\n        return resolve(viewModel);\n      }\n      // todo: add if ('viewModel' in config) to support static view model resolution\n      reject(new Error('Invalid route config. No \"moduleId\" found.'));\n    });\n  }\n\n  /**\n   * Create child container based on a router container\n   * Also ensures that child router are properly constructed in the newly created child container\n   * @internal\n   */\n  createChildContainer(router: Router): Container {\n    const childContainer = router.container.createChild();\n\n    childContainer.registerSingleton(RouterViewLocator);\n    childContainer.getChildRouter = function() {\n      let childRouter: Router;\n\n      childContainer.registerHandler(\n        Router,\n        () => childRouter || (childRouter = router.createChild(childContainer))\n      );\n\n      return childContainer.get(Router);\n    };\n    return childContainer;\n  }\n\n  /**\n   * Load corresponding component of a route config of a navigation instruction\n   */\n  loadRoute(router: Router, config: RouteConfig, _navInstruction: NavigationInstruction): Promise<any> {\n    return this\n      .resolveViewModel(router, config)\n      .then(viewModel => this.compositionEngine.ensureViewModel({\n        viewModel: viewModel,\n        childContainer: this.createChildContainer(router),\n        view: config.view || config.viewStrategy,\n        router: router\n      } as CompositionContext));\n  }\n}\n\n/**@internal exported for unit testing */\nexport function createDynamicClass(moduleId: string) {\n  const name = /([^\\/^\\?]+)\\.html/i.exec(moduleId)[1];\n\n  class DynamicClass {\n\n    $parent: any;\n\n    bind(bindingContext: any) {\n      this.$parent = bindingContext;\n    }\n  }\n\n  customElement(name)(DynamicClass);\n  useView(moduleId)(DynamicClass);\n\n  return DynamicClass;\n}\n","import { IStaticResourceConfig } from 'aurelia-templating';\nimport { Router } from 'aurelia-router';\nimport { DOM } from 'aurelia-pal';\nimport * as LogManager from 'aurelia-logging';\n\nconst logger = LogManager.getLogger('route-href');\n\n/**\n * Helper custom attribute to help associate an element with a route by name\n */\nexport class RouteHref {\n\n  /*@internal */\n  static inject() {\n    return [Router, DOM.Element];\n  }\n\n  /**\n   * @internal Actively avoid using decorator to reduce the amount of code generated\n   */\n  static $resource: IStaticResourceConfig = {\n    type: 'attribute',\n    name: 'route-href',\n    bindables: [\n      { name: 'route', changeHandler: 'processChange', primaryProperty: true },\n      { name: 'params', changeHandler: 'processChange' },\n      'attribute'\n    ] as any // type definition of Aurelia templating is wrong\n  };\n\n  /**\n   * Current router of this attribute\n   */\n  readonly router: Router;\n\n  /**\n   * Element this attribute is associated with\n   */\n  readonly element: Element;\n\n  /**@internal */\n  isActive: boolean;\n\n  /**\n   * Name of the route this attribute refers to. This name should exist in the current router hierarchy\n   */\n  route: string;\n\n  /**\n   * Parameters of this attribute to generate URL.\n   */\n  params: Record<string, any>;\n\n  /**\n   * Target property on a custom element if this attribute is put on a custom element\n   * OR an attribute if this attribute is put on a normal element\n   */\n  attribute: string;\n\n  constructor(\n    router: Router,\n    element: Element\n  ) {\n    this.router = router;\n    this.element = element;\n    this.attribute = 'href';\n  }\n\n  bind() {\n    this.isActive = true;\n    this.processChange();\n  }\n\n  unbind() {\n    this.isActive = false;\n  }\n\n  attributeChanged(value: any, previous: any) {\n    if (previous) {\n      this.element.removeAttribute(previous);\n    }\n\n    return this.processChange();\n  }\n\n  processChange() {\n    return this.router\n      .ensureConfigured()\n      .then((): null => {\n        if (!this.isActive) {\n          // returning null to avoid Bluebird warning\n          return null;\n        }\n        const element = this.element as Element & { au: any };\n\n        const href = this.router.generate(this.route, this.params);\n\n        if (element.au.controller) {\n          element.au.controller.viewModel[this.attribute] = href;\n        } else {\n          element.setAttribute(this.attribute, href);\n        }\n\n        // returning null to avoid Bluebird warning\n        return null;\n      })\n      .catch((reason: any) => {\n        logger.error(reason);\n      });\n  }\n}\n\n","import { Router, AppRouter, RouteLoader } from 'aurelia-router';\nimport { TemplatingRouteLoader } from './route-loader';\nimport { RouterView } from './router-view';\nimport { RouteHref } from './route-href';\nimport { IFrameworkConfiguration } from './interfaces';\n\nexport function configure(config: IFrameworkConfiguration) {\n  config\n    .singleton(RouteLoader, TemplatingRouteLoader)\n    .singleton(Router, AppRouter)\n    .globalResources(\n      RouterView,\n      RouteHref\n    );\n\n  config.container.registerAlias(Router, AppRouter);\n}\n\nexport {\n  TemplatingRouteLoader,\n  RouterView,\n  RouteHref\n};\n"],"names":["LogManager.getLogger"],"mappings":"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"}