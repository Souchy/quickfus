var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs = require('../../file-system');
const logger = require('aurelia-logging').getLogger('install-deps');
const Yarn = require('../../package-managers/yarn').Yarn;
const NPM = require('../../package-managers/npm').NPM;
exports.choosePackageManager = function (packageManager, projectFolder, ui) {
    return __awaiter(this, void 0, void 0, function* () {
        if (packageManager === 'yarn' || packageManager === 'npm')
            return packageManager;
        const npmLockExists = fs.existsSync(fs.join(projectFolder, 'package-lock.json'));
        const yarnLockExists = fs.existsSync(fs.join(projectFolder, 'yarn.lock'));
        if (npmLockExists && yarnLockExists) {
            logger.warn("Found lock files for both npm and yarn! Lock files are not cross compatible between package managers. It's recommended to remove either package-lock.json (NPM) or yarn.lock (Yarn) from the project directory before installing new packages.\n");
        }
        else if (npmLockExists) {
            logger.info('Found NPM lock file. Recommend continued use of npm as package manager.\n');
        }
        else if (yarnLockExists) {
            logger.info('Found Yarn lock file. Recommend continued use of yarn as package manager.\n');
        }
        let defaultIndex = 0;
        let options = [];
        const yarn = new Yarn();
        if (yarn.isAvailable(projectFolder)) {
            if (!yarnLockExists) {
                logger.info('Lock files are not cross compatible between package managers. Choose Yarn here only if you intend to use Yarn for future package installs. Alternatively, remove either yarn.lock or package-lock.json from the project directory before installing new packages.\n');
            }
            if (npmLockExists && !yarnLockExists) {
                defaultIndex = 1;
            }
            options = [
                {
                    message: 'Yes, use Yarn',
                    hint: 'Installs all server, client and tooling dependencies needed to build the project using Yarn.',
                    value: 'yarn'
                },
                {
                    message: 'Yes, use NPM',
                    hint: 'Installs all server, client and tooling dependencies needed to build the project using NPM.',
                    value: 'npm'
                },
                {
                    message: 'No',
                    hint: 'Completes the new project wizard without installing dependencies.',
                    value: 'no'
                }
            ];
        }
        else {
            options = [
                {
                    message: 'Yes',
                    hint: 'Installs all server, client and tooling dependencies needed to build the project.',
                    value: 'yes'
                },
                {
                    message: 'No',
                    hint: 'Completes the new project wizard without installing dependencies.',
                    value: 'no'
                }
            ];
        }
        const answer = yield ui.question('Would you like to install all the npm dependencies?', options, defaultIndex);
        if (answer === 'yes' || answer === 'npm' || answer === 'yarn') {
            return answer === 'yes' ? 'npm' : answer;
        }
    });
};
exports.installDeps = function (packageManager, projectFolder) {
    return __awaiter(this, void 0, void 0, function* () {
        if (packageManager === 'yarn') {
            const yarn = new Yarn();
            try {
                yield yarn.install([], projectFolder);
                return;
            }
            catch (e) {
                logger.error('Something went wrong while attempting to use Yarn. Falling back to NPM');
                logger.info(e);
            }
        }
        const npm = new NPM();
        yield npm.install([], projectFolder);
    });
};
